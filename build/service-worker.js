"use strict";var precacheConfig=[["/index.html","210929a55c0543ecf4884a76d08d4f82"],["/static/css/main.41d83f5b.css","9d2be4b1ef8cf0fc002b74674faecb4e"],["/static/js/main.ad75b51e.js","5a3483b31ef87faf6999baecb4fb9bd7"],["/static/media/CompSciResume.dca912b9.pdf","dca912b91eb27729a36fe5fad4194a65"],["/static/media/Weather.ef50fddd.jpg","ef50fdddf7e972a8871a3292e3e9818a"],["/static/media/c.00cc5bdb.svg","00cc5bdb950c7cd82c90fbe74b26b3cf"],["/static/media/chat.d0a1ce7a.jpg","d0a1ce7ac195b97bcbec8d5c484e0443"],["/static/media/css.86cae94d.svg","86cae94d7925105a028592a620afb49d"],["/static/media/express.c6bab64b.svg","c6bab64b183f96aa47077fd3db37afd0"],["/static/media/forum1.836f54f0.jpg","836f54f080de6714c4ea5623a72f6027"],["/static/media/forum2.5d2a5334.jpg","5d2a5334f600b7f0407b1a54f64ae22b"],["/static/media/forum3.4f6cc203.jpg","4f6cc2033b76047e8a8ce995ead8cfd8"],["/static/media/github.647be3b7.svg","647be3b71f222752e2589593eaad6a08"],["/static/media/github.d150d4d6.svg","d150d4d60b034a7b8fc0df36dd389590"],["/static/media/html.3f8fbb0a.svg","3f8fbb0a3148d91384985659e614c138"],["/static/media/java.a66fed97.svg","a66fed97507f929594477f07b59685cb"],["/static/media/javascript.85d952ae.svg","85d952ae2fffa9b5b44a68ee8e2f0fc3"],["/static/media/linkedin.8cc2d3a8.svg","8cc2d3a80c1ebec192c2f29c08333dc6"],["/static/media/linux.9436e0ad.svg","9436e0ada9a6349daaf672fd76cda124"],["/static/media/mongodb.2985235d.svg","2985235df31b8742d893d5b7e80145c5"],["/static/media/node.b337a2fb.svg","b337a2fb0b1289e6757e632dc766ff6b"],["/static/media/postman.63bc9e1a.svg","63bc9e1a49c0c5e39ce3e01422c4cb20"],["/static/media/projectinclude.2f4e5116.jpg","2f4e511662a30eea7427b43530dab319"],["/static/media/react.f711e3e4.svg","f711e3e4983cb6d1767d9a4d7df22dd9"],["/static/media/resume.674e60a3.svg","674e60a37ff85de16fca4d0b171e1ca8"],["/static/media/ryerson.11d4297c.png","11d4297c24855aaa0ac106b14e0707d4"],["/static/media/sql.3c9e4f9d.png","3c9e4f9def15e4e1b725c0af3609a059"],["/static/media/suit.b3de0d39.jpg","b3de0d3914c9f6eb300d2a92b03b8c63"],["/static/media/windows.81444068.svg","81444068308ea1be43d0b5198b8ea278"],["/static/media/zara1.cac061e1.jpg","cac061e1182a8799b501f6504747ea9c"],["/static/media/zara2.6d452764.jpg","6d4527649ecfc1bd008d7a41385eb5b7"],["/static/media/zara3.c35d94a8.jpg","c35d94a80d0c07487ac2d982f415a280"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,a){var t=new URL(e);return"/"===t.pathname.slice(-1)&&(t.pathname+=a),t.toString()},cleanResponse=function(a){return a.redirected?("body"in a?Promise.resolve(a.body):a.blob()).then(function(e){return new Response(e,{headers:a.headers,status:a.status,statusText:a.statusText})}):Promise.resolve(a)},createCacheKey=function(e,a,t,c){var n=new URL(e);return c&&n.pathname.match(c)||(n.search+=(n.search?"&":"")+encodeURIComponent(a)+"="+encodeURIComponent(t)),n.toString()},isPathWhitelisted=function(e,a){if(0===e.length)return!0;var t=new URL(a).pathname;return e.some(function(e){return t.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(a){return t.every(function(e){return!e.test(a[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var a=e[0],t=e[1],c=new URL(a,self.location),n=createCacheKey(c,hashParamName,t,/\.\w{8}\./);return[c.toString(),n]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(c){return setOfCachedUrls(c).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var e=new Request(a,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+a+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return c.put(a,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(a){return a.keys().then(function(e){return Promise.all(e.map(function(e){if(!t.has(e.url))return a.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(a){if("GET"===a.request.method){var e,t=stripIgnoredUrlParameters(a.request.url,ignoreUrlParametersMatching),c="index.html";(e=urlsToCacheKeys.has(t))||(t=addDirectoryIndex(t,c),e=urlsToCacheKeys.has(t));var n="/index.html";!e&&"navigate"===a.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],a.request.url)&&(t=new URL(n,self.location).toString(),e=urlsToCacheKeys.has(t)),e&&a.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(t)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',a.request.url,e),fetch(a.request)}))}});